var fs = require('fs');

exports = module.exports = function (sequelize) {
  var models = {};

  models.AdCampaign = (fs.existsSync(PATH + '/models/ad-campaign.js')) ? require(PATH + '/models/ad-campaign')(sequelize) : sequelize.import(PATH + '/models/base/ad-campaign'); 
  models.AdCampaignFeaturedProject = (fs.existsSync(PATH + '/models/ad-campaign-featured-project.js')) ? require(PATH + '/models/ad-campaign-featured-project')(sequelize) : sequelize.import(PATH + '/models/base/ad-campaign-featured-project'); 
  models.AdCampaignHomepageGallery = (fs.existsSync(PATH + '/models/ad-campaign-homepage-gallery.js')) ? require(PATH + '/models/ad-campaign-homepage-gallery')(sequelize) : sequelize.import(PATH + '/models/base/ad-campaign-homepage-gallery'); 
  models.AdCampaignHomepageSearch = (fs.existsSync(PATH + '/models/ad-campaign-homepage-search.js')) ? require(PATH + '/models/ad-campaign-homepage-search')(sequelize) : sequelize.import(PATH + '/models/base/ad-campaign-homepage-search'); 
  models.AdCampaignStatus = (fs.existsSync(PATH + '/models/ad-campaign-status.js')) ? require(PATH + '/models/ad-campaign-status')(sequelize) : sequelize.import(PATH + '/models/base/ad-campaign-status'); 
  models.AdCampaignSearchResults = (fs.existsSync(PATH + '/models/ad-campaign-search-results.js')) ? require(PATH + '/models/ad-campaign-search-results')(sequelize) : sequelize.import(PATH + '/models/base/ad-campaign-search-results'); 
  models.AdCampaignLandingPage = (fs.existsSync(PATH + '/models/ad-campaign-landing-page.js')) ? require(PATH + '/models/ad-campaign-landing-page')(sequelize) : sequelize.import(PATH + '/models/base/ad-campaign-landing-page'); 
  models.AgentClient = (fs.existsSync(PATH + '/models/agent-client.js')) ? require(PATH + '/models/agent-client')(sequelize) : sequelize.import(PATH + '/models/base/agent-client'); 
  models.AgentBadge = (fs.existsSync(PATH + '/models/agent-badge.js')) ? require(PATH + '/models/agent-badge')(sequelize) : sequelize.import(PATH + '/models/base/agent-badge'); 
  models.AdCampaignSem = (fs.existsSync(PATH + '/models/ad-campaign-sem.js')) ? require(PATH + '/models/ad-campaign-sem')(sequelize) : sequelize.import(PATH + '/models/base/ad-campaign-sem'); 
  models.AdPackage = (fs.existsSync(PATH + '/models/ad-package.js')) ? require(PATH + '/models/ad-package')(sequelize) : sequelize.import(PATH + '/models/base/ad-package'); 
  models.AgentLanguage = (fs.existsSync(PATH + '/models/agent-language.js')) ? require(PATH + '/models/agent-language')(sequelize) : sequelize.import(PATH + '/models/base/agent-language'); 
  models.AgentProfile = (fs.existsSync(PATH + '/models/agent-profile.js')) ? require(PATH + '/models/agent-profile')(sequelize) : sequelize.import(PATH + '/models/base/agent-profile'); 
  models.AgentProfileAgentBadge = (fs.existsSync(PATH + '/models/agent-profile-agent-badge.js')) ? require(PATH + '/models/agent-profile-agent-badge')(sequelize) : sequelize.import(PATH + '/models/base/agent-profile-agent-badge'); 
  models.AgentHood = (fs.existsSync(PATH + '/models/agent-hood.js')) ? require(PATH + '/models/agent-hood')(sequelize) : sequelize.import(PATH + '/models/base/agent-hood'); 
  models.AnnouncementContributor = (fs.existsSync(PATH + '/models/announcement-contributor.js')) ? require(PATH + '/models/announcement-contributor')(sequelize) : sequelize.import(PATH + '/models/base/announcement-contributor'); 
  models.ApiKey = (fs.existsSync(PATH + '/models/api-key.js')) ? require(PATH + '/models/api-key')(sequelize) : sequelize.import(PATH + '/models/base/api-key'); 
  models.ApiKeyStatus = (fs.existsSync(PATH + '/models/api-key-status.js')) ? require(PATH + '/models/api-key-status')(sequelize) : sequelize.import(PATH + '/models/base/api-key-status'); 
  models.Announcement = (fs.existsSync(PATH + '/models/announcement.js')) ? require(PATH + '/models/announcement')(sequelize) : sequelize.import(PATH + '/models/base/announcement'); 
  models.Area = (fs.existsSync(PATH + '/models/area.js')) ? require(PATH + '/models/area')(sequelize) : sequelize.import(PATH + '/models/base/area'); 
  models.AvgDomToronto = (fs.existsSync(PATH + '/models/avg-dom-toronto.js')) ? require(PATH + '/models/avg-dom-toronto')(sequelize) : sequelize.import(PATH + '/models/base/avg-dom-toronto'); 
  models.AvgPriceToronto = (fs.existsSync(PATH + '/models/avg-price-toronto.js')) ? require(PATH + '/models/avg-price-toronto')(sequelize) : sequelize.import(PATH + '/models/base/avg-price-toronto'); 
  models.ApiRequestsLog = (fs.existsSync(PATH + '/models/api-requests-log.js')) ? require(PATH + '/models/api-requests-log')(sequelize) : sequelize.import(PATH + '/models/base/api-requests-log'); 
  models.Builder = (fs.existsSync(PATH + '/models/builder.js')) ? require(PATH + '/models/builder')(sequelize) : sequelize.import(PATH + '/models/base/builder'); 
  models.Building = (fs.existsSync(PATH + '/models/building.js')) ? require(PATH + '/models/building')(sequelize) : sequelize.import(PATH + '/models/base/building'); 
  models.BuildingStatus = (fs.existsSync(PATH + '/models/building-status.js')) ? require(PATH + '/models/building-status')(sequelize) : sequelize.import(PATH + '/models/base/building-status'); 
  models.BlogLink = (fs.existsSync(PATH + '/models/blog-link.js')) ? require(PATH + '/models/blog-link')(sequelize) : sequelize.import(PATH + '/models/base/blog-link'); 
  models.ChbaCat = (fs.existsSync(PATH + '/models/chba-cat.js')) ? require(PATH + '/models/chba-cat')(sequelize) : sequelize.import(PATH + '/models/base/chba-cat'); 
  models.ChbaMember = (fs.existsSync(PATH + '/models/chba-member.js')) ? require(PATH + '/models/chba-member')(sequelize) : sequelize.import(PATH + '/models/base/chba-member'); 
  models.ChbaMemberCat = (fs.existsSync(PATH + '/models/chba-member-cat.js')) ? require(PATH + '/models/chba-member-cat')(sequelize) : sequelize.import(PATH + '/models/base/chba-member-cat'); 
  models.ChbaAssociation = (fs.existsSync(PATH + '/models/chba-association.js')) ? require(PATH + '/models/chba-association')(sequelize) : sequelize.import(PATH + '/models/base/chba-association'); 
  models.Client = (fs.existsSync(PATH + '/models/client.js')) ? require(PATH + '/models/client')(sequelize) : sequelize.import(PATH + '/models/base/client'); 
  models.ClientAffiliation = (fs.existsSync(PATH + '/models/client-affiliation.js')) ? require(PATH + '/models/client-affiliation')(sequelize) : sequelize.import(PATH + '/models/base/client-affiliation'); 
  models.Contact = (fs.existsSync(PATH + '/models/contact.js')) ? require(PATH + '/models/contact')(sequelize) : sequelize.import(PATH + '/models/base/contact'); 
  models.City = (fs.existsSync(PATH + '/models/city.js')) ? require(PATH + '/models/city')(sequelize) : sequelize.import(PATH + '/models/base/city'); 
  models.ContactReferralSource = (fs.existsSync(PATH + '/models/contact-referral-source.js')) ? require(PATH + '/models/contact-referral-source')(sequelize) : sequelize.import(PATH + '/models/base/contact-referral-source'); 
  models.ContactSource = (fs.existsSync(PATH + '/models/contact-source.js')) ? require(PATH + '/models/contact-source')(sequelize) : sequelize.import(PATH + '/models/base/contact-source'); 
  models.ContactTool = (fs.existsSync(PATH + '/models/contact-tool.js')) ? require(PATH + '/models/contact-tool')(sequelize) : sequelize.import(PATH + '/models/base/contact-tool'); 
  models.Daycare = (fs.existsSync(PATH + '/models/daycare.js')) ? require(PATH + '/models/daycare')(sequelize) : sequelize.import(PATH + '/models/base/daycare'); 
  models.ContactFunnel = (fs.existsSync(PATH + '/models/contact-funnel.js')) ? require(PATH + '/models/contact-funnel')(sequelize) : sequelize.import(PATH + '/models/base/contact-funnel'); 
  models.DaycareAgeCat = (fs.existsSync(PATH + '/models/daycare-age-cat.js')) ? require(PATH + '/models/daycare-age-cat')(sequelize) : sequelize.import(PATH + '/models/base/daycare-age-cat'); 
  models.DaycareRating = (fs.existsSync(PATH + '/models/daycare-rating.js')) ? require(PATH + '/models/daycare-rating')(sequelize) : sequelize.import(PATH + '/models/base/daycare-rating'); 
  models.DaycareService = (fs.existsSync(PATH + '/models/daycare-service.js')) ? require(PATH + '/models/daycare-service')(sequelize) : sequelize.import(PATH + '/models/base/daycare-service'); 
  models.DaycareSpace = (fs.existsSync(PATH + '/models/daycare-space.js')) ? require(PATH + '/models/daycare-space')(sequelize) : sequelize.import(PATH + '/models/base/daycare-space'); 
  models.Event = (fs.existsSync(PATH + '/models/event.js')) ? require(PATH + '/models/event')(sequelize) : sequelize.import(PATH + '/models/base/event'); 
  models.EventType = (fs.existsSync(PATH + '/models/event-type.js')) ? require(PATH + '/models/event-type')(sequelize) : sequelize.import(PATH + '/models/base/event-type'); 
  models.EntityArea = (fs.existsSync(PATH + '/models/entity-area.js')) ? require(PATH + '/models/entity-area')(sequelize) : sequelize.import(PATH + '/models/base/entity-area'); 
  models.ExclusivePropertyBuildingAmenity = (fs.existsSync(PATH + '/models/exclusive-property-building-amenity.js')) ? require(PATH + '/models/exclusive-property-building-amenity')(sequelize) : sequelize.import(PATH + '/models/base/exclusive-property-building-amenity'); 
  models.ExclusivePropertyFeature = (fs.existsSync(PATH + '/models/exclusive-property-feature.js')) ? require(PATH + '/models/exclusive-property-feature')(sequelize) : sequelize.import(PATH + '/models/base/exclusive-property-feature'); 
  models.ExclusiveProperty = (fs.existsSync(PATH + '/models/exclusive-property.js')) ? require(PATH + '/models/exclusive-property')(sequelize) : sequelize.import(PATH + '/models/base/exclusive-property'); 
  models.ExclusivePropertyBathroom = (fs.existsSync(PATH + '/models/exclusive-property-bathroom.js')) ? require(PATH + '/models/exclusive-property-bathroom')(sequelize) : sequelize.import(PATH + '/models/base/exclusive-property-bathroom'); 
  models.ExclusivePropertyParking = (fs.existsSync(PATH + '/models/exclusive-property-parking.js')) ? require(PATH + '/models/exclusive-property-parking')(sequelize) : sequelize.import(PATH + '/models/base/exclusive-property-parking'); 
  models.ExclusivePropertyRoom = (fs.existsSync(PATH + '/models/exclusive-property-room.js')) ? require(PATH + '/models/exclusive-property-room')(sequelize) : sequelize.import(PATH + '/models/base/exclusive-property-room'); 
  models.ExclusivePropertySaleType = (fs.existsSync(PATH + '/models/exclusive-property-sale-type.js')) ? require(PATH + '/models/exclusive-property-sale-type')(sequelize) : sequelize.import(PATH + '/models/base/exclusive-property-sale-type'); 
  models.ExclusivePropertyOwnership = (fs.existsSync(PATH + '/models/exclusive-property-ownership.js')) ? require(PATH + '/models/exclusive-property-ownership')(sequelize) : sequelize.import(PATH + '/models/base/exclusive-property-ownership'); 
  models.ExclusivePropertyStatus = (fs.existsSync(PATH + '/models/exclusive-property-status.js')) ? require(PATH + '/models/exclusive-property-status')(sequelize) : sequelize.import(PATH + '/models/base/exclusive-property-status'); 
  models.ExclusivePropertyStyle = (fs.existsSync(PATH + '/models/exclusive-property-style.js')) ? require(PATH + '/models/exclusive-property-style')(sequelize) : sequelize.import(PATH + '/models/base/exclusive-property-style'); 
  models.ExclusivePropertyTrpType = (fs.existsSync(PATH + '/models/exclusive-property-trp-type.js')) ? require(PATH + '/models/exclusive-property-trp-type')(sequelize) : sequelize.import(PATH + '/models/base/exclusive-property-trp-type'); 
  models.ExclusivePropertySpecDes = (fs.existsSync(PATH + '/models/exclusive-property-spec-des.js')) ? require(PATH + '/models/exclusive-property-spec-des')(sequelize) : sequelize.import(PATH + '/models/base/exclusive-property-spec-des'); 
  models.FacebookLogin = (fs.existsSync(PATH + '/models/facebook-login.js')) ? require(PATH + '/models/facebook-login')(sequelize) : sequelize.import(PATH + '/models/base/facebook-login'); 
  models.Feed = (fs.existsSync(PATH + '/models/feed.js')) ? require(PATH + '/models/feed')(sequelize) : sequelize.import(PATH + '/models/base/feed'); 
  models.FeedKey = (fs.existsSync(PATH + '/models/feed-key.js')) ? require(PATH + '/models/feed-key')(sequelize) : sequelize.import(PATH + '/models/base/feed-key'); 
  models.ExclusivePropertyType = (fs.existsSync(PATH + '/models/exclusive-property-type.js')) ? require(PATH + '/models/exclusive-property-type')(sequelize) : sequelize.import(PATH + '/models/base/exclusive-property-type'); 
  models.Hood = (fs.existsSync(PATH + '/models/hood.js')) ? require(PATH + '/models/hood')(sequelize) : sequelize.import(PATH + '/models/base/hood'); 
  models.LandingPage = (fs.existsSync(PATH + '/models/landing-page.js')) ? require(PATH + '/models/landing-page')(sequelize) : sequelize.import(PATH + '/models/base/landing-page'); 
  models.LandingTemplate = (fs.existsSync(PATH + '/models/landing-template.js')) ? require(PATH + '/models/landing-template')(sequelize) : sequelize.import(PATH + '/models/base/landing-template'); 
  models.FeedStatus = (fs.existsSync(PATH + '/models/feed-status.js')) ? require(PATH + '/models/feed-status')(sequelize) : sequelize.import(PATH + '/models/base/feed-status'); 
  models.ListingChangelog = (fs.existsSync(PATH + '/models/listing-changelog.js')) ? require(PATH + '/models/listing-changelog')(sequelize) : sequelize.import(PATH + '/models/base/listing-changelog'); 
  models.ListingType = (fs.existsSync(PATH + '/models/listing-type.js')) ? require(PATH + '/models/listing-type')(sequelize) : sequelize.import(PATH + '/models/base/listing-type'); 
  models.LogAdCampaignCallback = (fs.existsSync(PATH + '/models/log-ad-campaign-callback.js')) ? require(PATH + '/models/log-ad-campaign-callback')(sequelize) : sequelize.import(PATH + '/models/base/log-ad-campaign-callback'); 
  models.LogAdCampaignClick = (fs.existsSync(PATH + '/models/log-ad-campaign-click.js')) ? require(PATH + '/models/log-ad-campaign-click')(sequelize) : sequelize.import(PATH + '/models/base/log-ad-campaign-click'); 
  models.LandingTermination = (fs.existsSync(PATH + '/models/landing-termination.js')) ? require(PATH + '/models/landing-termination')(sequelize) : sequelize.import(PATH + '/models/base/landing-termination'); 
  models.LogAdCampaignContact = (fs.existsSync(PATH + '/models/log-ad-campaign-contact.js')) ? require(PATH + '/models/log-ad-campaign-contact')(sequelize) : sequelize.import(PATH + '/models/base/log-ad-campaign-contact'); 
  models.LogAdCampaignHit = (fs.existsSync(PATH + '/models/log-ad-campaign-hit.js')) ? require(PATH + '/models/log-ad-campaign-hit')(sequelize) : sequelize.import(PATH + '/models/base/log-ad-campaign-hit'); 
  models.LogApiCall = (fs.existsSync(PATH + '/models/log-api-call.js')) ? require(PATH + '/models/log-api-call')(sequelize) : sequelize.import(PATH + '/models/base/log-api-call'); 
  models.LogBuilderCallback = (fs.existsSync(PATH + '/models/log-builder-callback.js')) ? require(PATH + '/models/log-builder-callback')(sequelize) : sequelize.import(PATH + '/models/base/log-builder-callback'); 
  models.LogFeedQuery = (fs.existsSync(PATH + '/models/log-feed-query.js')) ? require(PATH + '/models/log-feed-query')(sequelize) : sequelize.import(PATH + '/models/base/log-feed-query'); 
  models.LogPageViews = (fs.existsSync(PATH + '/models/log-page-views.js')) ? require(PATH + '/models/log-page-views')(sequelize) : sequelize.import(PATH + '/models/base/log-page-views'); 
  models.LogPrCampaignHit = (fs.existsSync(PATH + '/models/log-pr-campaign-hit.js')) ? require(PATH + '/models/log-pr-campaign-hit')(sequelize) : sequelize.import(PATH + '/models/base/log-pr-campaign-hit'); 
  models.LogBuilderContact = (fs.existsSync(PATH + '/models/log-builder-contact.js')) ? require(PATH + '/models/log-builder-contact')(sequelize) : sequelize.import(PATH + '/models/base/log-builder-contact'); 
  models.LogPreconUpdateSubscribe = (fs.existsSync(PATH + '/models/log-precon-update-subscribe.js')) ? require(PATH + '/models/log-precon-update-subscribe')(sequelize) : sequelize.import(PATH + '/models/base/log-precon-update-subscribe'); 
  models.LogPreconVideoClick = (fs.existsSync(PATH + '/models/log-precon-video-click.js')) ? require(PATH + '/models/log-precon-video-click')(sequelize) : sequelize.import(PATH + '/models/base/log-precon-video-click'); 
  models.LogPropertySearch = (fs.existsSync(PATH + '/models/log-property-search.js')) ? require(PATH + '/models/log-property-search')(sequelize) : sequelize.import(PATH + '/models/base/log-property-search'); 
  models.LogPreconSearch = (fs.existsSync(PATH + '/models/log-precon-search.js')) ? require(PATH + '/models/log-precon-search')(sequelize) : sequelize.import(PATH + '/models/base/log-precon-search'); 
  models.MainCity = (fs.existsSync(PATH + '/models/main-city.js')) ? require(PATH + '/models/main-city')(sequelize) : sequelize.import(PATH + '/models/base/main-city'); 
  models.MainHood = (fs.existsSync(PATH + '/models/main-hood.js')) ? require(PATH + '/models/main-hood')(sequelize) : sequelize.import(PATH + '/models/base/main-hood'); 
  models.MainProvince = (fs.existsSync(PATH + '/models/main-province.js')) ? require(PATH + '/models/main-province')(sequelize) : sequelize.import(PATH + '/models/base/main-province'); 
  models.LoginType = (fs.existsSync(PATH + '/models/login-type.js')) ? require(PATH + '/models/login-type')(sequelize) : sequelize.import(PATH + '/models/base/login-type'); 
  models.MapArea = (fs.existsSync(PATH + '/models/map-area.js')) ? require(PATH + '/models/map-area')(sequelize) : sequelize.import(PATH + '/models/base/map-area'); 
  models.MapEntityArea = (fs.existsSync(PATH + '/models/map-entity-area.js')) ? require(PATH + '/models/map-entity-area')(sequelize) : sequelize.import(PATH + '/models/base/map-entity-area'); 
  models.MainRegion = (fs.existsSync(PATH + '/models/main-region.js')) ? require(PATH + '/models/main-region')(sequelize) : sequelize.import(PATH + '/models/base/main-region'); 
  models.MarketoEventPush = (fs.existsSync(PATH + '/models/marketo-event-push.js')) ? require(PATH + '/models/marketo-event-push')(sequelize) : sequelize.import(PATH + '/models/base/marketo-event-push'); 
  models.MarketoEvent = (fs.existsSync(PATH + '/models/marketo-event.js')) ? require(PATH + '/models/marketo-event')(sequelize) : sequelize.import(PATH + '/models/base/marketo-event'); 
  models.MarketoEventBackup = (fs.existsSync(PATH + '/models/marketo-event-backup.js')) ? require(PATH + '/models/marketo-event-backup')(sequelize) : sequelize.import(PATH + '/models/base/marketo-event-backup'); 
  models.MediaType = (fs.existsSync(PATH + '/models/media-type.js')) ? require(PATH + '/models/media-type')(sequelize) : sequelize.import(PATH + '/models/base/media-type'); 
  models.MigrationVersion = (fs.existsSync(PATH + '/models/migration-version.js')) ? require(PATH + '/models/migration-version')(sequelize) : sequelize.import(PATH + '/models/base/migration-version'); 
  models.MarketoEventType = (fs.existsSync(PATH + '/models/marketo-event-type.js')) ? require(PATH + '/models/marketo-event-type')(sequelize) : sequelize.import(PATH + '/models/base/marketo-event-type'); 
  models.MediaLink = (fs.existsSync(PATH + '/models/media-link.js')) ? require(PATH + '/models/media-link')(sequelize) : sequelize.import(PATH + '/models/base/media-link'); 
  models.NewsletterSection = (fs.existsSync(PATH + '/models/newsletter-section.js')) ? require(PATH + '/models/newsletter-section')(sequelize) : sequelize.import(PATH + '/models/base/newsletter-section'); 
  models.NewsletterSubscription = (fs.existsSync(PATH + '/models/newsletter-subscription.js')) ? require(PATH + '/models/newsletter-subscription')(sequelize) : sequelize.import(PATH + '/models/base/newsletter-subscription'); 
  models.Notification = (fs.existsSync(PATH + '/models/notification.js')) ? require(PATH + '/models/notification')(sequelize) : sequelize.import(PATH + '/models/base/notification'); 
  models.Newsletter = (fs.existsSync(PATH + '/models/newsletter.js')) ? require(PATH + '/models/newsletter')(sequelize) : sequelize.import(PATH + '/models/base/newsletter'); 
  models.NotificationPush = (fs.existsSync(PATH + '/models/notification-push.js')) ? require(PATH + '/models/notification-push')(sequelize) : sequelize.import(PATH + '/models/base/notification-push'); 
  models.OauthAccessToken = (fs.existsSync(PATH + '/models/oauth-access-token.js')) ? require(PATH + '/models/oauth-access-token')(sequelize) : sequelize.import(PATH + '/models/base/oauth-access-token'); 
  models.OauthClient = (fs.existsSync(PATH + '/models/oauth-client.js')) ? require(PATH + '/models/oauth-client')(sequelize) : sequelize.import(PATH + '/models/base/oauth-client'); 
  models.NotificationMedium = (fs.existsSync(PATH + '/models/notification-medium.js')) ? require(PATH + '/models/notification-medium')(sequelize) : sequelize.import(PATH + '/models/base/notification-medium'); 
  models.Page = (fs.existsSync(PATH + '/models/page.js')) ? require(PATH + '/models/page')(sequelize) : sequelize.import(PATH + '/models/base/page'); 
  models.PageHistory = (fs.existsSync(PATH + '/models/page-history.js')) ? require(PATH + '/models/page-history')(sequelize) : sequelize.import(PATH + '/models/base/page-history'); 
  models.PrCampaign = (fs.existsSync(PATH + '/models/pr-campaign.js')) ? require(PATH + '/models/pr-campaign')(sequelize) : sequelize.import(PATH + '/models/base/pr-campaign'); 
  models.OauthRefreshToken = (fs.existsSync(PATH + '/models/oauth-refresh-token.js')) ? require(PATH + '/models/oauth-refresh-token')(sequelize) : sequelize.import(PATH + '/models/base/oauth-refresh-token'); 
  models.PreconAmenity = (fs.existsSync(PATH + '/models/precon-amenity.js')) ? require(PATH + '/models/precon-amenity')(sequelize) : sequelize.import(PATH + '/models/base/precon-amenity'); 
  models.PreconBuilder = (fs.existsSync(PATH + '/models/precon-builder.js')) ? require(PATH + '/models/precon-builder')(sequelize) : sequelize.import(PATH + '/models/base/precon-builder'); 
  models.PreconEvent = (fs.existsSync(PATH + '/models/precon-event.js')) ? require(PATH + '/models/precon-event')(sequelize) : sequelize.import(PATH + '/models/base/precon-event'); 
  models.Precon = (fs.existsSync(PATH + '/models/precon.js')) ? require(PATH + '/models/precon')(sequelize) : sequelize.import(PATH + '/models/base/precon'); 
  models.PreconHoodBackup = (fs.existsSync(PATH + '/models/precon-hood-backup.js')) ? require(PATH + '/models/precon-hood-backup')(sequelize) : sequelize.import(PATH + '/models/base/precon-hood-backup'); 
  models.PreconImage = (fs.existsSync(PATH + '/models/precon-image.js')) ? require(PATH + '/models/precon-image')(sequelize) : sequelize.import(PATH + '/models/base/precon-image'); 
  models.PreconPreconAmenity = (fs.existsSync(PATH + '/models/precon-precon-amenity.js')) ? require(PATH + '/models/precon-precon-amenity')(sequelize) : sequelize.import(PATH + '/models/base/precon-precon-amenity'); 
  models.PreconFinishes = (fs.existsSync(PATH + '/models/precon-finishes.js')) ? require(PATH + '/models/precon-finishes')(sequelize) : sequelize.import(PATH + '/models/base/precon-finishes'); 
  models.PreconSalesOffice = (fs.existsSync(PATH + '/models/precon-sales-office.js')) ? require(PATH + '/models/precon-sales-office')(sequelize) : sequelize.import(PATH + '/models/base/precon-sales-office'); 
  models.PreconStatus = (fs.existsSync(PATH + '/models/precon-status.js')) ? require(PATH + '/models/precon-status')(sequelize) : sequelize.import(PATH + '/models/base/precon-status'); 
  models.PreconSalesAgent = (fs.existsSync(PATH + '/models/precon-sales-agent.js')) ? require(PATH + '/models/precon-sales-agent')(sequelize) : sequelize.import(PATH + '/models/base/precon-sales-agent'); 
  models.PreconVip = (fs.existsSync(PATH + '/models/precon-vip.js')) ? require(PATH + '/models/precon-vip')(sequelize) : sequelize.import(PATH + '/models/base/precon-vip'); 
  models.Press = (fs.existsSync(PATH + '/models/press.js')) ? require(PATH + '/models/press')(sequelize) : sequelize.import(PATH + '/models/base/press'); 
  models.PreconUnit = (fs.existsSync(PATH + '/models/precon-unit.js')) ? require(PATH + '/models/precon-unit')(sequelize) : sequelize.import(PATH + '/models/base/precon-unit'); 
  models.PreconVideo = (fs.existsSync(PATH + '/models/precon-video.js')) ? require(PATH + '/models/precon-video')(sequelize) : sequelize.import(PATH + '/models/base/precon-video'); 
  models.PromoNotification = (fs.existsSync(PATH + '/models/promo-notification.js')) ? require(PATH + '/models/promo-notification')(sequelize) : sequelize.import(PATH + '/models/base/promo-notification'); 
  models.Property = (fs.existsSync(PATH + '/models/property.js')) ? require(PATH + '/models/property')(sequelize) : sequelize.import(PATH + '/models/base/property'); 
  models.PropertyBathroom = (fs.existsSync(PATH + '/models/property-bathroom.js')) ? require(PATH + '/models/property-bathroom')(sequelize) : sequelize.import(PATH + '/models/base/property-bathroom'); 
  models.ProficiencySubject = (fs.existsSync(PATH + '/models/proficiency-subject.js')) ? require(PATH + '/models/proficiency-subject')(sequelize) : sequelize.import(PATH + '/models/base/proficiency-subject'); 
  models.PropertyFeature = (fs.existsSync(PATH + '/models/property-feature.js')) ? require(PATH + '/models/property-feature')(sequelize) : sequelize.import(PATH + '/models/base/property-feature'); 
  models.PropertyGeom = (fs.existsSync(PATH + '/models/property-geom.js')) ? require(PATH + '/models/property-geom')(sequelize) : sequelize.import(PATH + '/models/base/property-geom'); 
  models.PropertyMap = (fs.existsSync(PATH + '/models/property-map.js')) ? require(PATH + '/models/property-map')(sequelize) : sequelize.import(PATH + '/models/base/property-map'); 
  models.PropertyBuildingAmenity = (fs.existsSync(PATH + '/models/property-building-amenity.js')) ? require(PATH + '/models/property-building-amenity')(sequelize) : sequelize.import(PATH + '/models/base/property-building-amenity'); 
  models.PropertyParking = (fs.existsSync(PATH + '/models/property-parking.js')) ? require(PATH + '/models/property-parking')(sequelize) : sequelize.import(PATH + '/models/base/property-parking'); 
  models.PropertyRoom = (fs.existsSync(PATH + '/models/property-room.js')) ? require(PATH + '/models/property-room')(sequelize) : sequelize.import(PATH + '/models/base/property-room'); 
  models.PropertySpecDes = (fs.existsSync(PATH + '/models/property-spec-des.js')) ? require(PATH + '/models/property-spec-des')(sequelize) : sequelize.import(PATH + '/models/base/property-spec-des'); 
  models.PropertyOwnership = (fs.existsSync(PATH + '/models/property-ownership.js')) ? require(PATH + '/models/property-ownership')(sequelize) : sequelize.import(PATH + '/models/base/property-ownership'); 
  models.PropertyStatus = (fs.existsSync(PATH + '/models/property-status.js')) ? require(PATH + '/models/property-status')(sequelize) : sequelize.import(PATH + '/models/base/property-status'); 
  models.PropertyStyle = (fs.existsSync(PATH + '/models/property-style.js')) ? require(PATH + '/models/property-style')(sequelize) : sequelize.import(PATH + '/models/base/property-style'); 
  models.PropertyTrpType = (fs.existsSync(PATH + '/models/property-trp-type.js')) ? require(PATH + '/models/property-trp-type')(sequelize) : sequelize.import(PATH + '/models/base/property-trp-type'); 
  models.PropertyStats = (fs.existsSync(PATH + '/models/property-stats.js')) ? require(PATH + '/models/property-stats')(sequelize) : sequelize.import(PATH + '/models/base/property-stats'); 
  models.PropertyshowRegistration = (fs.existsSync(PATH + '/models/propertyshow-registration.js')) ? require(PATH + '/models/propertyshow-registration')(sequelize) : sequelize.import(PATH + '/models/base/propertyshow-registration'); 
  models.Province = (fs.existsSync(PATH + '/models/province.js')) ? require(PATH + '/models/province')(sequelize) : sequelize.import(PATH + '/models/base/province'); 
  models.ReBoard = (fs.existsSync(PATH + '/models/re-board.js')) ? require(PATH + '/models/re-board')(sequelize) : sequelize.import(PATH + '/models/base/re-board'); 
  models.PropertyType = (fs.existsSync(PATH + '/models/property-type.js')) ? require(PATH + '/models/property-type')(sequelize) : sequelize.import(PATH + '/models/base/property-type'); 
  models.ReDistrict = (fs.existsSync(PATH + '/models/re-district.js')) ? require(PATH + '/models/re-district')(sequelize) : sequelize.import(PATH + '/models/base/re-district'); 
  models.ReDistrictBoundary = (fs.existsSync(PATH + '/models/re-district-boundary.js')) ? require(PATH + '/models/re-district-boundary')(sequelize) : sequelize.import(PATH + '/models/base/re-district-boundary'); 
  models.ReStatsByBoard = (fs.existsSync(PATH + '/models/re-stats-by-board.js')) ? require(PATH + '/models/re-stats-by-board')(sequelize) : sequelize.import(PATH + '/models/base/re-stats-by-board'); 
  models.ReCity = (fs.existsSync(PATH + '/models/re-city.js')) ? require(PATH + '/models/re-city')(sequelize) : sequelize.import(PATH + '/models/base/re-city'); 
  models.ReStatsByCityProptype = (fs.existsSync(PATH + '/models/re-stats-by-city-proptype.js')) ? require(PATH + '/models/re-stats-by-city-proptype')(sequelize) : sequelize.import(PATH + '/models/base/re-stats-by-city-proptype'); 
  models.ReStatsByDistrict = (fs.existsSync(PATH + '/models/re-stats-by-district.js')) ? require(PATH + '/models/re-stats-by-district')(sequelize) : sequelize.import(PATH + '/models/base/re-stats-by-district'); 
  models.ReStatsByProptype = (fs.existsSync(PATH + '/models/re-stats-by-proptype.js')) ? require(PATH + '/models/re-stats-by-proptype')(sequelize) : sequelize.import(PATH + '/models/base/re-stats-by-proptype'); 
  models.ReStatsByCity = (fs.existsSync(PATH + '/models/re-stats-by-city.js')) ? require(PATH + '/models/re-stats-by-city')(sequelize) : sequelize.import(PATH + '/models/base/re-stats-by-city'); 
  models.Registry = (fs.existsSync(PATH + '/models/registry.js')) ? require(PATH + '/models/registry')(sequelize) : sequelize.import(PATH + '/models/base/registry'); 
  models.Resource = (fs.existsSync(PATH + '/models/resource.js')) ? require(PATH + '/models/resource')(sequelize) : sequelize.import(PATH + '/models/base/resource'); 
  models.ResourceTemp = (fs.existsSync(PATH + '/models/resource-temp.js')) ? require(PATH + '/models/resource-temp')(sequelize) : sequelize.import(PATH + '/models/base/resource-temp'); 
  models.Region = (fs.existsSync(PATH + '/models/region.js')) ? require(PATH + '/models/region')(sequelize) : sequelize.import(PATH + '/models/base/region'); 
  models.RetsFeedRun = (fs.existsSync(PATH + '/models/rets-feed-run.js')) ? require(PATH + '/models/rets-feed-run')(sequelize) : sequelize.import(PATH + '/models/base/rets-feed-run'); 
  models.RetsFeedRunError = (fs.existsSync(PATH + '/models/rets-feed-run-error.js')) ? require(PATH + '/models/rets-feed-run-error')(sequelize) : sequelize.import(PATH + '/models/base/rets-feed-run-error'); 
  models.RetsStaging = (fs.existsSync(PATH + '/models/rets-staging.js')) ? require(PATH + '/models/rets-staging')(sequelize) : sequelize.import(PATH + '/models/base/rets-staging'); 
  models.RetsFeed = (fs.existsSync(PATH + '/models/rets-feed.js')) ? require(PATH + '/models/rets-feed')(sequelize) : sequelize.import(PATH + '/models/base/rets-feed'); 
  models.SavedSearch = (fs.existsSync(PATH + '/models/saved-search.js')) ? require(PATH + '/models/saved-search')(sequelize) : sequelize.import(PATH + '/models/base/saved-search'); 
  models.SavedSearchProperty = (fs.existsSync(PATH + '/models/saved-search-property.js')) ? require(PATH + '/models/saved-search-property')(sequelize) : sequelize.import(PATH + '/models/base/saved-search-property'); 
  models.SavedSearchPropertyHood = (fs.existsSync(PATH + '/models/saved-search-property-hood.js')) ? require(PATH + '/models/saved-search-property-hood')(sequelize) : sequelize.import(PATH + '/models/base/saved-search-property-hood'); 
  models.Role = (fs.existsSync(PATH + '/models/role.js')) ? require(PATH + '/models/role')(sequelize) : sequelize.import(PATH + '/models/base/role'); 
  models.School = (fs.existsSync(PATH + '/models/school.js')) ? require(PATH + '/models/school')(sequelize) : sequelize.import(PATH + '/models/base/school'); 
  models.SchoolBoard = (fs.existsSync(PATH + '/models/school-board.js')) ? require(PATH + '/models/school-board')(sequelize) : sequelize.import(PATH + '/models/base/school-board'); 
  models.SchoolDemographic = (fs.existsSync(PATH + '/models/school-demographic.js')) ? require(PATH + '/models/school-demographic')(sequelize) : sequelize.import(PATH + '/models/base/school-demographic'); 
  models.SavedSearchPropertyType = (fs.existsSync(PATH + '/models/saved-search-property-type.js')) ? require(PATH + '/models/saved-search-property-type')(sequelize) : sequelize.import(PATH + '/models/base/saved-search-property-type'); 
  models.SchoolEligibleAddress = (fs.existsSync(PATH + '/models/school-eligible-address.js')) ? require(PATH + '/models/school-eligible-address')(sequelize) : sequelize.import(PATH + '/models/base/school-eligible-address'); 
  models.SchoolLevel = (fs.existsSync(PATH + '/models/school-level.js')) ? require(PATH + '/models/school-level')(sequelize) : sequelize.import(PATH + '/models/base/school-level'); 
  models.SchoolProficiency = (fs.existsSync(PATH + '/models/school-proficiency.js')) ? require(PATH + '/models/school-proficiency')(sequelize) : sequelize.import(PATH + '/models/base/school-proficiency'); 
  models.SchoolEligibility = (fs.existsSync(PATH + '/models/school-eligibility.js')) ? require(PATH + '/models/school-eligibility')(sequelize) : sequelize.import(PATH + '/models/base/school-eligibility'); 
  models.SeoPage = (fs.existsSync(PATH + '/models/seo-page.js')) ? require(PATH + '/models/seo-page')(sequelize) : sequelize.import(PATH + '/models/base/seo-page'); 
  models.SeoTemplate = (fs.existsSync(PATH + '/models/seo-template.js')) ? require(PATH + '/models/seo-template')(sequelize) : sequelize.import(PATH + '/models/base/seo-template'); 
  models.SeoTermination = (fs.existsSync(PATH + '/models/seo-termination.js')) ? require(PATH + '/models/seo-termination')(sequelize) : sequelize.import(PATH + '/models/base/seo-termination'); 
  models.SchoolType = (fs.existsSync(PATH + '/models/school-type.js')) ? require(PATH + '/models/school-type')(sequelize) : sequelize.import(PATH + '/models/base/school-type'); 
  models.Subscription = (fs.existsSync(PATH + '/models/subscription.js')) ? require(PATH + '/models/subscription')(sequelize) : sequelize.import(PATH + '/models/base/subscription'); 
  models.SubscriptionSource = (fs.existsSync(PATH + '/models/subscription-source.js')) ? require(PATH + '/models/subscription-source')(sequelize) : sequelize.import(PATH + '/models/base/subscription-source'); 
  models.SubscriptionType = (fs.existsSync(PATH + '/models/subscription-type.js')) ? require(PATH + '/models/subscription-type')(sequelize) : sequelize.import(PATH + '/models/base/subscription-type'); 
  models.StreetSuffix = (fs.existsSync(PATH + '/models/street-suffix.js')) ? require(PATH + '/models/street-suffix')(sequelize) : sequelize.import(PATH + '/models/base/street-suffix'); 
  models.TrebMwAreaPropType = (fs.existsSync(PATH + '/models/treb-mw-area-prop-type.js')) ? require(PATH + '/models/treb-mw-area-prop-type')(sequelize) : sequelize.import(PATH + '/models/base/treb-mw-area-prop-type'); 
  models.TrebMwAreaPropTypestore = (fs.existsSync(PATH + '/models/treb-mw-area-prop-typestore.js')) ? require(PATH + '/models/treb-mw-area-prop-typestore')(sequelize) : sequelize.import(PATH + '/models/base/treb-mw-area-prop-typestore'); 
  models.TrebMwAreaStore = (fs.existsSync(PATH + '/models/treb-mw-area-store.js')) ? require(PATH + '/models/treb-mw-area-store')(sequelize) : sequelize.import(PATH + '/models/base/treb-mw-area-store'); 
  models.TrebMwArea = (fs.existsSync(PATH + '/models/treb-mw-area.js')) ? require(PATH + '/models/treb-mw-area')(sequelize) : sequelize.import(PATH + '/models/base/treb-mw-area'); 
  models.UrlForward = (fs.existsSync(PATH + '/models/url-forward.js')) ? require(PATH + '/models/url-forward')(sequelize) : sequelize.import(PATH + '/models/base/url-forward'); 
  models.User = (fs.existsSync(PATH + '/models/user.js')) ? require(PATH + '/models/user')(sequelize) : sequelize.import(PATH + '/models/base/user'); 
  models.UserAffiliate = (fs.existsSync(PATH + '/models/user-affiliate.js')) ? require(PATH + '/models/user-affiliate')(sequelize) : sequelize.import(PATH + '/models/base/user-affiliate'); 
  models.UnsubscriptionSource = (fs.existsSync(PATH + '/models/unsubscription-source.js')) ? require(PATH + '/models/unsubscription-source')(sequelize) : sequelize.import(PATH + '/models/base/unsubscription-source'); 
  models.UserInvite = (fs.existsSync(PATH + '/models/user-invite.js')) ? require(PATH + '/models/user-invite')(sequelize) : sequelize.import(PATH + '/models/base/user-invite'); 
  models.UserStatus = (fs.existsSync(PATH + '/models/user-status.js')) ? require(PATH + '/models/user-status')(sequelize) : sequelize.import(PATH + '/models/base/user-status'); 
  models.UserBookmark = (fs.existsSync(PATH + '/models/user-bookmark.js')) ? require(PATH + '/models/user-bookmark')(sequelize) : sequelize.import(PATH + '/models/base/user-bookmark'); 

  models.AdCampaign.belongsTo(models.AdCampaignStatus, { foreignKey: 'ad_campaign_status_id' });
  models.AdCampaignStatus.hasMany(models.AdCampaign, { foreignKey: 'ad_campaign_status_id' });
  models.AdCampaign.belongsTo(models.AdPackage, { foreignKey: 'ad_package_id' });
  models.AdPackage.hasMany(models.AdCampaign, { foreignKey: 'ad_package_id' });
  models.AdCampaign.belongsTo(models.Client, { foreignKey: 'client_id' });
  models.Client.hasMany(models.AdCampaign, { foreignKey: 'client_id' });
  models.AdCampaign.belongsTo(models.User, { foreignKey: 'created_by' });
  models.User.hasMany(models.AdCampaign, { foreignKey: 'created_by' });
  models.AdCampaignHomepageGallery.belongsTo(models.AdCampaign, { foreignKey: 'ad_campaign_id' });
  models.AdCampaign.hasMany(models.AdCampaignHomepageGallery, { foreignKey: 'ad_campaign_id' });
  models.AdCampaignHomepageSearch.belongsTo(models.AdCampaign, { foreignKey: 'ad_campaign_id' });
  models.AdCampaign.hasMany(models.AdCampaignHomepageSearch, { foreignKey: 'ad_campaign_id' });
  models.AdCampaignFeaturedProject.belongsTo(models.AdCampaign, { foreignKey: 'ad_campaign_id' });
  models.AdCampaign.hasMany(models.AdCampaignFeaturedProject, { foreignKey: 'ad_campaign_id' });
  models.AdCampaignFeaturedProject.belongsTo(models.Precon, { foreignKey: 'precon_id' });
  models.Precon.hasMany(models.AdCampaignFeaturedProject, { foreignKey: 'precon_id' });
  models.AdCampaignLandingPage.belongsTo(models.AdCampaign, { foreignKey: 'ad_campaign_id' });
  models.AdCampaign.hasMany(models.AdCampaignLandingPage, { foreignKey: 'ad_campaign_id' });
  models.AdCampaignLandingPage.belongsTo(models.Precon, { foreignKey: 'precon_id' });
  models.Precon.hasMany(models.AdCampaignLandingPage, { foreignKey: 'precon_id' });
  models.AgentClient.belongsTo(models.AgentProfile, { foreignKey: 'agent_profile_id' });
  models.AgentProfile.hasMany(models.AgentClient, { foreignKey: 'agent_profile_id' });
  models.AdCampaignSearchResults.belongsTo(models.AdCampaign, { foreignKey: 'ad_campaign_id' });
  models.AdCampaign.hasMany(models.AdCampaignSearchResults, { foreignKey: 'ad_campaign_id' });
  models.AdPackage.belongsTo(models.User, { foreignKey: 'created_by' });
  models.User.hasMany(models.AdPackage, { foreignKey: 'created_by' });
  models.AgentLanguage.belongsTo(models.AgentProfile, { foreignKey: 'agent_profile_id' });
  models.AgentProfile.hasMany(models.AgentLanguage, { foreignKey: 'agent_profile_id' });
  models.AdCampaignSem.belongsTo(models.AdCampaign, { foreignKey: 'ad_campaign_id' });
  models.AdCampaign.hasMany(models.AdCampaignSem, { foreignKey: 'ad_campaign_id' });
  models.AdCampaignSem.belongsTo(models.Precon, { foreignKey: 'precon_id' });
  models.Precon.hasMany(models.AdCampaignSem, { foreignKey: 'precon_id' });
  models.AgentHood.belongsTo(models.AgentProfile, { foreignKey: 'agent_profile_id' });
  models.AgentProfile.hasMany(models.AgentHood, { foreignKey: 'agent_profile_id' });
  models.AgentHood.belongsTo(models.Hood, { foreignKey: 'hood_id' });
  models.Hood.hasMany(models.AgentHood, { foreignKey: 'hood_id' });
  models.AnnouncementContributor.belongsTo(models.Announcement, { foreignKey: 'announcement_id' });
  models.Announcement.hasMany(models.AnnouncementContributor, { foreignKey: 'announcement_id' });
  models.AgentProfileAgentBadge.belongsTo(models.AgentProfile, { foreignKey: 'agent_profile_id' });
  models.AgentProfile.hasMany(models.AgentProfileAgentBadge, { foreignKey: 'agent_profile_id' });
  models.AgentProfileAgentBadge.belongsTo(models.AgentBadge, { foreignKey: 'agent_badge_id' });
  models.AgentBadge.hasMany(models.AgentProfileAgentBadge, { foreignKey: 'agent_badge_id' });
  models.ApiKey.belongsTo(models.ApiKeyStatus, { foreignKey: 'api_key_status_id' });
  models.ApiKeyStatus.hasMany(models.ApiKey, { foreignKey: 'api_key_status_id' });
  models.ApiKey.belongsTo(models.User, { foreignKey: 'user_id' });
  models.User.hasMany(models.ApiKey, { foreignKey: 'user_id' });
  models.ApiRequestsLog.belongsTo(models.User, { foreignKey: 'user_id' });
  models.User.hasMany(models.ApiRequestsLog, { foreignKey: 'user_id' });
  models.Building.belongsTo(models.Builder, { foreignKey: 'builder_id' });
  models.Builder.hasMany(models.Building, { foreignKey: 'builder_id' });
  models.Building.belongsTo(models.BuildingStatus, { foreignKey: 'building_status_id' });
  models.BuildingStatus.hasMany(models.Building, { foreignKey: 'building_status_id' });
  models.ChbaMemberCat.belongsTo(models.ChbaCat, { foreignKey: 'chba_cat_id' });
  models.ChbaCat.hasMany(models.ChbaMemberCat, { foreignKey: 'chba_cat_id' });
  models.ChbaMemberCat.belongsTo(models.ChbaMember, { foreignKey: 'chba_member_id' });
  models.ChbaMember.hasMany(models.ChbaMemberCat, { foreignKey: 'chba_member_id' });
  models.Client.belongsTo(models.User, { foreignKey: 'created_by' });
  models.User.hasMany(models.Client, { foreignKey: 'created_by' });
  models.Client.belongsTo(models.User, { foreignKey: 'user_id' });
  models.User.hasMany(models.Client, { foreignKey: 'user_id' });
  models.ChbaMember.belongsTo(models.ChbaAssociation, { foreignKey: 'chba_association_id' });
  models.ChbaAssociation.hasMany(models.ChbaMember, { foreignKey: 'chba_association_id' });
  models.Contact.belongsTo(models.AgentProfile, { foreignKey: 'agent_profile_id' });
  models.AgentProfile.hasMany(models.Contact, { foreignKey: 'agent_profile_id' });
  models.Contact.belongsTo(models.ContactFunnel, { foreignKey: 'contact_funnel_id' });
  models.ContactFunnel.hasMany(models.Contact, { foreignKey: 'contact_funnel_id' });
  models.Contact.belongsTo(models.ContactSource, { foreignKey: 'contact_source_id' });
  models.ContactSource.hasMany(models.Contact, { foreignKey: 'contact_source_id' });
  models.Contact.belongsTo(models.ContactTool, { foreignKey: 'contact_tool_id' });
  models.ContactTool.hasMany(models.Contact, { foreignKey: 'contact_tool_id' });
  models.Contact.belongsTo(models.Precon, { foreignKey: 'precon_id' });
  models.Precon.hasMany(models.Contact, { foreignKey: 'precon_id' });
  models.Contact.belongsTo(models.Property, { foreignKey: 'prop_id' });
  models.Property.hasMany(models.Contact, { foreignKey: 'prop_id' });
  models.Contact.belongsTo(models.User, { foreignKey: 'user_id' });
  models.User.hasMany(models.Contact, { foreignKey: 'user_id' });
  models.City.belongsTo(models.Province, { foreignKey: 'province_id' });
  models.Province.hasMany(models.City, { foreignKey: 'province_id' });
  models.City.belongsTo(models.Region, { foreignKey: 'region_id' });
  models.Region.hasMany(models.City, { foreignKey: 'region_id' });
  models.ClientAffiliation.belongsTo(models.Client, { foreignKey: 'client_id' });
  models.Client.hasMany(models.ClientAffiliation, { foreignKey: 'client_id' });
  models.DaycareRating.belongsTo(models.Daycare, { foreignKey: 'daycare_id' });
  models.Daycare.hasMany(models.DaycareRating, { foreignKey: 'daycare_id' });
  models.DaycareService.belongsTo(models.Daycare, { foreignKey: 'daycare_id' });
  models.Daycare.hasMany(models.DaycareService, { foreignKey: 'daycare_id' });
  models.DaycareSpace.belongsTo(models.Daycare, { foreignKey: 'daycare_id' });
  models.Daycare.hasMany(models.DaycareSpace, { foreignKey: 'daycare_id' });
  models.DaycareSpace.belongsTo(models.DaycareAgeCat, { foreignKey: 'daycare_age_cat_id' });
  models.DaycareAgeCat.hasMany(models.DaycareSpace, { foreignKey: 'daycare_age_cat_id' });
  models.Event.belongsTo(models.EventType, { foreignKey: 'event_type_id' });
  models.EventType.hasMany(models.Event, { foreignKey: 'event_type_id' });
  models.Event.belongsTo(models.User, { foreignKey: 'user_id' });
  models.User.hasMany(models.Event, { foreignKey: 'user_id' });
  models.ExclusivePropertyFeature.belongsTo(models.ExclusiveProperty, { foreignKey: 'exclusive_property_id' });
  models.ExclusiveProperty.hasMany(models.ExclusivePropertyFeature, { foreignKey: 'exclusive_property_id' });
  models.ExclusiveProperty.belongsTo(models.ExclusivePropertyTrpType, { foreignKey: 'exclusive_property_trp_type_id' });
  models.ExclusivePropertyTrpType.hasMany(models.ExclusiveProperty, { foreignKey: 'exclusive_property_trp_type_id' });
  models.ExclusiveProperty.belongsTo(models.MainCity, { foreignKey: 'city_id' });
  models.MainCity.hasMany(models.ExclusiveProperty, { foreignKey: 'city_id' });
  models.ExclusiveProperty.belongsTo(models.ExclusivePropertyOwnership, { foreignKey: 'exclusive_property_ownership_id' });
  models.ExclusivePropertyOwnership.hasMany(models.ExclusiveProperty, { foreignKey: 'exclusive_property_ownership_id' });
  models.ExclusiveProperty.belongsTo(models.ExclusivePropertySaleType, { foreignKey: 'exclusive_property_sale_type_id' });
  models.ExclusivePropertySaleType.hasMany(models.ExclusiveProperty, { foreignKey: 'exclusive_property_sale_type_id' });
  models.ExclusiveProperty.belongsTo(models.ExclusivePropertyStatus, { foreignKey: 'exclusive_property_status_id' });
  models.ExclusivePropertyStatus.hasMany(models.ExclusiveProperty, { foreignKey: 'exclusive_property_status_id' });
  models.ExclusiveProperty.belongsTo(models.ExclusivePropertyStyle, { foreignKey: 'exclusive_property_style_id' });
  models.ExclusivePropertyStyle.hasMany(models.ExclusiveProperty, { foreignKey: 'exclusive_property_style_id' });
  models.ExclusiveProperty.belongsTo(models.ExclusivePropertyType, { foreignKey: 'exclusive_property_type_id' });
  models.ExclusivePropertyType.hasMany(models.ExclusiveProperty, { foreignKey: 'exclusive_property_type_id' });
  models.ExclusiveProperty.belongsTo(models.MainHood, { foreignKey: 'hood_id' });
  models.MainHood.hasMany(models.ExclusiveProperty, { foreignKey: 'hood_id' });
  models.ExclusiveProperty.belongsTo(models.Precon, { foreignKey: 'precon_id' });
  models.Precon.hasMany(models.ExclusiveProperty, { foreignKey: 'precon_id' });
  models.ExclusiveProperty.belongsTo(models.MainProvince, { foreignKey: 'province_id' });
  models.MainProvince.hasMany(models.ExclusiveProperty, { foreignKey: 'province_id' });
  models.ExclusiveProperty.belongsTo(models.ReDistrict, { foreignKey: 're_district_id' });
  models.ReDistrict.hasMany(models.ExclusiveProperty, { foreignKey: 're_district_id' });
  models.ExclusiveProperty.belongsTo(models.MainRegion, { foreignKey: 'region_id' });
  models.MainRegion.hasMany(models.ExclusiveProperty, { foreignKey: 'region_id' });
  models.ExclusivePropertyBuildingAmenity.belongsTo(models.ExclusiveProperty, { foreignKey: 'exclusive_property_id' });
  models.ExclusiveProperty.hasMany(models.ExclusivePropertyBuildingAmenity, { foreignKey: 'exclusive_property_id' });
  models.ExclusivePropertyRoom.belongsTo(models.ExclusiveProperty, { foreignKey: 'exclusive_property_id' });
  models.ExclusiveProperty.hasMany(models.ExclusivePropertyRoom, { foreignKey: 'exclusive_property_id' });
  models.ExclusivePropertyBathroom.belongsTo(models.ExclusiveProperty, { foreignKey: 'exclusive_property_id' });
  models.ExclusiveProperty.hasMany(models.ExclusivePropertyBathroom, { foreignKey: 'exclusive_property_id' });
  models.ExclusivePropertyParking.belongsTo(models.ExclusiveProperty, { foreignKey: 'exclusive_property_id' });
  models.ExclusiveProperty.hasMany(models.ExclusivePropertyParking, { foreignKey: 'exclusive_property_id' });
  models.FacebookLogin.belongsTo(models.User, { foreignKey: 'user_id' });
  models.User.hasMany(models.FacebookLogin, { foreignKey: 'user_id' });
  models.Feed.belongsTo(models.FeedStatus, { foreignKey: 'feed_status_id' });
  models.FeedStatus.hasMany(models.Feed, { foreignKey: 'feed_status_id' });
  models.FeedKey.belongsTo(models.Feed, { foreignKey: 'feed_id' });
  models.Feed.hasMany(models.FeedKey, { foreignKey: 'feed_id' });
  models.FeedKey.belongsTo(models.User, { foreignKey: 'user_id' });
  models.User.hasMany(models.FeedKey, { foreignKey: 'user_id' });
  models.ExclusivePropertySpecDes.belongsTo(models.ExclusiveProperty, { foreignKey: 'exclusive_property_id' });
  models.ExclusiveProperty.hasMany(models.ExclusivePropertySpecDes, { foreignKey: 'exclusive_property_id' });
  models.Hood.belongsTo(models.City, { foreignKey: 'city_id' });
  models.City.hasMany(models.Hood, { foreignKey: 'city_id' });
  models.LandingPage.belongsTo(models.LandingTemplate, { foreignKey: 'landing_template_id' });
  models.LandingTemplate.hasMany(models.LandingPage, { foreignKey: 'landing_template_id' });
  models.LandingPage.belongsTo(models.LandingTermination, { foreignKey: 'landing_termination_id' });
  models.LandingTermination.hasMany(models.LandingPage, { foreignKey: 'landing_termination_id' });
  models.LandingPage.belongsTo(models.Page, { foreignKey: 'page_id' });
  models.Page.hasMany(models.LandingPage, { foreignKey: 'page_id' });
  models.LogAdCampaignCallback.belongsTo(models.AdCampaign, { foreignKey: 'ad_campaign_id' });
  models.AdCampaign.hasMany(models.LogAdCampaignCallback, { foreignKey: 'ad_campaign_id' });
  models.LogAdCampaignContact.belongsTo(models.AdCampaign, { foreignKey: 'ad_campaign_id' });
  models.AdCampaign.hasMany(models.LogAdCampaignContact, { foreignKey: 'ad_campaign_id' });
  models.LogAdCampaignHit.belongsTo(models.AdCampaign, { foreignKey: 'ad_campaign_id' });
  models.AdCampaign.hasMany(models.LogAdCampaignHit, { foreignKey: 'ad_campaign_id' });
  models.LogAdCampaignClick.belongsTo(models.AdCampaign, { foreignKey: 'ad_campaign_id' });
  models.AdCampaign.hasMany(models.LogAdCampaignClick, { foreignKey: 'ad_campaign_id' });
  models.LogFeedQuery.belongsTo(models.FeedKey, { foreignKey: 'feed_key_id' });
  models.FeedKey.hasMany(models.LogFeedQuery, { foreignKey: 'feed_key_id' });
  models.LogPreconUpdateSubscribe.belongsTo(models.Precon, { foreignKey: 'precon_id' });
  models.Precon.hasMany(models.LogPreconUpdateSubscribe, { foreignKey: 'precon_id' });
  models.LogPreconUpdateSubscribe.belongsTo(models.User, { foreignKey: 'user_id' });
  models.User.hasMany(models.LogPreconUpdateSubscribe, { foreignKey: 'user_id' });
  models.LogPreconVideoClick.belongsTo(models.PreconVideo, { foreignKey: 'precon_video_id' });
  models.PreconVideo.hasMany(models.LogPreconVideoClick, { foreignKey: 'precon_video_id' });
  models.LogPrCampaignHit.belongsTo(models.PrCampaign, { foreignKey: 'pr_campaign_id' });
  models.PrCampaign.hasMany(models.LogPrCampaignHit, { foreignKey: 'pr_campaign_id' });
  models.MainCity.belongsTo(models.MainProvince, { foreignKey: 'province_id' });
  models.MainProvince.hasMany(models.MainCity, { foreignKey: 'province_id' });
  models.MainCity.belongsTo(models.MainRegion, { foreignKey: 'region_id' });
  models.MainRegion.hasMany(models.MainCity, { foreignKey: 'region_id' });
  models.MainHood.belongsTo(models.MainCity, { foreignKey: 'city_id' });
  models.MainCity.hasMany(models.MainHood, { foreignKey: 'city_id' });
  models.MarketoEventPush.belongsTo(models.MarketoEvent, { foreignKey: 'marketo_event_id' });
  models.MarketoEvent.hasMany(models.MarketoEventPush, { foreignKey: 'marketo_event_id' });
  models.MarketoEvent.belongsTo(models.MarketoEventType, { foreignKey: 'marketo_event_type_id' });
  models.MarketoEventType.hasMany(models.MarketoEvent, { foreignKey: 'marketo_event_type_id' });
  models.MainRegion.belongsTo(models.MainProvince, { foreignKey: 'province_id' });
  models.MainProvince.hasMany(models.MainRegion, { foreignKey: 'province_id' });
  models.NewsletterSection.belongsTo(models.Newsletter, { foreignKey: 'newsletter_id' });
  models.Newsletter.hasMany(models.NewsletterSection, { foreignKey: 'newsletter_id' });
  models.Notification.belongsTo(models.NotificationMedium, { foreignKey: 'notification_medium_id' });
  models.NotificationMedium.hasMany(models.Notification, { foreignKey: 'notification_medium_id' });
  models.MediaLink.belongsTo(models.MediaType, { foreignKey: 'media_type_id' });
  models.MediaType.hasMany(models.MediaLink, { foreignKey: 'media_type_id' });
  models.NotificationPush.belongsTo(models.Notification, { foreignKey: 'notification_id' });
  models.Notification.hasMany(models.NotificationPush, { foreignKey: 'notification_id' });
  models.OauthAccessToken.belongsTo(models.OauthClient, { foreignKey: 'oauth_client_id' });
  models.OauthClient.hasMany(models.OauthAccessToken, { foreignKey: 'oauth_client_id' });
  models.OauthAccessToken.belongsTo(models.User, { foreignKey: 'user_id' });
  models.User.hasMany(models.OauthAccessToken, { foreignKey: 'user_id' });
  models.PageHistory.belongsTo(models.Page, { foreignKey: 'page_id' });
  models.Page.hasMany(models.PageHistory, { foreignKey: 'page_id' });
  models.PreconBuilder.belongsTo(models.Builder, { foreignKey: 'builder_id' });
  models.Builder.hasMany(models.PreconBuilder, { foreignKey: 'builder_id' });
  models.PreconBuilder.belongsTo(models.Precon, { foreignKey: 'precon_id' });
  models.Precon.hasMany(models.PreconBuilder, { foreignKey: 'precon_id' });
  models.PreconEvent.belongsTo(models.Precon, { foreignKey: 'precon_id' });
  models.Precon.hasMany(models.PreconEvent, { foreignKey: 'precon_id' });
  models.OauthRefreshToken.belongsTo(models.OauthClient, { foreignKey: 'oauth_client_id' });
  models.OauthClient.hasMany(models.OauthRefreshToken, { foreignKey: 'oauth_client_id' });
  models.OauthRefreshToken.belongsTo(models.User, { foreignKey: 'user_id' });
  models.User.hasMany(models.OauthRefreshToken, { foreignKey: 'user_id' });
  models.PreconImage.belongsTo(models.Precon, { foreignKey: 'precon_id' });
  models.Precon.hasMany(models.PreconImage, { foreignKey: 'precon_id' });
  models.PreconPreconAmenity.belongsTo(models.Precon, { foreignKey: 'precon_id' });
  models.Precon.hasMany(models.PreconPreconAmenity, { foreignKey: 'precon_id' });
  models.PreconPreconAmenity.belongsTo(models.PreconAmenity, { foreignKey: 'precon_amenity_id' });
  models.PreconAmenity.hasMany(models.PreconPreconAmenity, { foreignKey: 'precon_amenity_id' });
  models.Precon.belongsTo(models.MainCity, { foreignKey: 'city_id' });
  models.MainCity.hasMany(models.Precon, { foreignKey: 'city_id' });
  models.Precon.belongsTo(models.MainHood, { foreignKey: 'hood_id' });
  models.MainHood.hasMany(models.Precon, { foreignKey: 'hood_id' });
  models.Precon.belongsTo(models.PreconStatus, { foreignKey: 'precon_status_id' });
  models.PreconStatus.hasMany(models.Precon, { foreignKey: 'precon_status_id' });
  models.Precon.belongsTo(models.MainProvince, { foreignKey: 'province_id' });
  models.MainProvince.hasMany(models.Precon, { foreignKey: 'province_id' });
  models.Precon.belongsTo(models.ReDistrict, { foreignKey: 're_district_id' });
  models.ReDistrict.hasMany(models.Precon, { foreignKey: 're_district_id' });
  models.Precon.belongsTo(models.MainRegion, { foreignKey: 'region_id' });
  models.MainRegion.hasMany(models.Precon, { foreignKey: 'region_id' });
  models.Precon.belongsTo(models.SchoolEligibleAddress, { foreignKey: 'school_eligible_address_id' });
  models.SchoolEligibleAddress.hasMany(models.Precon, { foreignKey: 'school_eligible_address_id' });
  models.PreconSalesOffice.belongsTo(models.Precon, { foreignKey: 'precon_id' });
  models.Precon.hasMany(models.PreconSalesOffice, { foreignKey: 'precon_id' });
  models.PreconSalesAgent.belongsTo(models.Precon, { foreignKey: 'precon_id' });
  models.Precon.hasMany(models.PreconSalesAgent, { foreignKey: 'precon_id' });
  models.PreconFinishes.belongsTo(models.Precon, { foreignKey: 'precon_id' });
  models.Precon.hasMany(models.PreconFinishes, { foreignKey: 'precon_id' });
  models.PreconUnit.belongsTo(models.Precon, { foreignKey: 'precon_id' });
  models.Precon.hasMany(models.PreconUnit, { foreignKey: 'precon_id' });
  models.PreconVip.belongsTo(models.Precon, { foreignKey: 'precon_id' });
  models.Precon.hasMany(models.PreconVip, { foreignKey: 'precon_id' });
  models.Property.belongsTo(models.PropertyTrpType, { foreignKey: 'property_trp_type_id' });
  models.PropertyTrpType.hasMany(models.Property, { foreignKey: 'property_trp_type_id' });
  models.Property.belongsTo(models.MainCity, { foreignKey: 'city_id' });
  models.MainCity.hasMany(models.Property, { foreignKey: 'city_id' });
  models.Property.belongsTo(models.MainHood, { foreignKey: 'hood_id' });
  models.MainHood.hasMany(models.Property, { foreignKey: 'hood_id' });
  models.Property.belongsTo(models.ListingType, { foreignKey: 'listing_type_id' });
  models.ListingType.hasMany(models.Property, { foreignKey: 'listing_type_id' });
  models.Property.belongsTo(models.PropertyOwnership, { foreignKey: 'property_ownership_id' });
  models.PropertyOwnership.hasMany(models.Property, { foreignKey: 'property_ownership_id' });
  models.Property.belongsTo(models.PropertyStatus, { foreignKey: 'property_status_id' });
  models.PropertyStatus.hasMany(models.Property, { foreignKey: 'property_status_id' });
  models.Property.belongsTo(models.PropertyStyle, { foreignKey: 'property_style_id' });
  models.PropertyStyle.hasMany(models.Property, { foreignKey: 'property_style_id' });
  models.Property.belongsTo(models.PropertyType, { foreignKey: 'property_type_id' });
  models.PropertyType.hasMany(models.Property, { foreignKey: 'property_type_id' });
  models.Property.belongsTo(models.MainProvince, { foreignKey: 'province_id' });
  models.MainProvince.hasMany(models.Property, { foreignKey: 'province_id' });
  models.Property.belongsTo(models.ReDistrict, { foreignKey: 're_district_id' });
  models.ReDistrict.hasMany(models.Property, { foreignKey: 're_district_id' });
  models.Property.belongsTo(models.MainRegion, { foreignKey: 'region_id' });
  models.MainRegion.hasMany(models.Property, { foreignKey: 'region_id' });
  models.Property.belongsTo(models.RetsFeed, { foreignKey: 'rets_feed_id' });
  models.RetsFeed.hasMany(models.Property, { foreignKey: 'rets_feed_id' });
  models.PreconVideo.belongsTo(models.Precon, { foreignKey: 'precon_id' });
  models.Precon.hasMany(models.PreconVideo, { foreignKey: 'precon_id' });
  models.PropertyFeature.belongsTo(models.Property, { foreignKey: 'property_id' });
  models.Property.hasMany(models.PropertyFeature, { foreignKey: 'property_id' });
  models.PropertyBathroom.belongsTo(models.Property, { foreignKey: 'property_id' });
  models.Property.hasMany(models.PropertyBathroom, { foreignKey: 'property_id' });
  models.PropertyBuildingAmenity.belongsTo(models.Property, { foreignKey: 'property_id' });
  models.Property.hasMany(models.PropertyBuildingAmenity, { foreignKey: 'property_id' });
  models.PropertyParking.belongsTo(models.Property, { foreignKey: 'property_id' });
  models.Property.hasMany(models.PropertyParking, { foreignKey: 'property_id' });
  models.PropertyRoom.belongsTo(models.Property, { foreignKey: 'property_id' });
  models.Property.hasMany(models.PropertyRoom, { foreignKey: 'property_id' });
  models.PropertyMap.belongsTo(models.Property, { foreignKey: 'property_id' });
  models.Property.hasMany(models.PropertyMap, { foreignKey: 'property_id' });
  models.PropertySpecDes.belongsTo(models.Property, { foreignKey: 'property_id' });
  models.Property.hasMany(models.PropertySpecDes, { foreignKey: 'property_id' });
  models.ReDistrict.belongsTo(models.ReBoard, { foreignKey: 're_board_id' });
  models.ReBoard.hasMany(models.ReDistrict, { foreignKey: 're_board_id' });
  models.ReDistrict.belongsTo(models.ReCity, { foreignKey: 're_city_id' });
  models.ReCity.hasMany(models.ReDistrict, { foreignKey: 're_city_id' });
  models.ReCity.belongsTo(models.ReBoard, { foreignKey: 're_board_id' });
  models.ReBoard.hasMany(models.ReCity, { foreignKey: 're_board_id' });
  models.ReDistrictBoundary.belongsTo(models.ReDistrict, { foreignKey: 're_district_id' });
  models.ReDistrict.hasMany(models.ReDistrictBoundary, { foreignKey: 're_district_id' });
  models.ReStatsByBoard.belongsTo(models.ReBoard, { foreignKey: 're_board_id' });
  models.ReBoard.hasMany(models.ReStatsByBoard, { foreignKey: 're_board_id' });
  models.ReStatsByProptype.belongsTo(models.ReBoard, { foreignKey: 're_board_id' });
  models.ReBoard.hasMany(models.ReStatsByProptype, { foreignKey: 're_board_id' });
  models.ReStatsByProptype.belongsTo(models.ReCity, { foreignKey: 're_city_id' });
  models.ReCity.hasMany(models.ReStatsByProptype, { foreignKey: 're_city_id' });
  models.ReStatsByProptype.belongsTo(models.ReDistrict, { foreignKey: 're_district_id' });
  models.ReDistrict.hasMany(models.ReStatsByProptype, { foreignKey: 're_district_id' });
  models.ReStatsByCityProptype.belongsTo(models.ReBoard, { foreignKey: 're_board_id' });
  models.ReBoard.hasMany(models.ReStatsByCityProptype, { foreignKey: 're_board_id' });
  models.ReStatsByCityProptype.belongsTo(models.ReCity, { foreignKey: 're_city_id' });
  models.ReCity.hasMany(models.ReStatsByCityProptype, { foreignKey: 're_city_id' });
  models.ReStatsByDistrict.belongsTo(models.ReCity, { foreignKey: 're_city_id' });
  models.ReCity.hasMany(models.ReStatsByDistrict, { foreignKey: 're_city_id' });
  models.ReStatsByDistrict.belongsTo(models.ReDistrict, { foreignKey: 're_district_id' });
  models.ReDistrict.hasMany(models.ReStatsByDistrict, { foreignKey: 're_district_id' });
  models.ReStatsByDistrict.belongsTo(models.ReBoard, { foreignKey: 're_board_id' });
  models.ReBoard.hasMany(models.ReStatsByDistrict, { foreignKey: 're_board_id' });
  models.ReStatsByCity.belongsTo(models.ReBoard, { foreignKey: 're_board_id' });
  models.ReBoard.hasMany(models.ReStatsByCity, { foreignKey: 're_board_id' });
  models.ReStatsByCity.belongsTo(models.ReCity, { foreignKey: 're_city_id' });
  models.ReCity.hasMany(models.ReStatsByCity, { foreignKey: 're_city_id' });
  models.RetsFeedRun.belongsTo(models.RetsFeed, { foreignKey: 'rets_feed_id' });
  models.RetsFeed.hasMany(models.RetsFeedRun, { foreignKey: 'rets_feed_id' });
  models.RetsFeedRunError.belongsTo(models.RetsFeedRun, { foreignKey: 'rets_feed_run_id' });
  models.RetsFeedRun.hasMany(models.RetsFeedRunError, { foreignKey: 'rets_feed_run_id' });
  models.RetsStaging.belongsTo(models.RetsFeedRun, { foreignKey: 'rets_feed_run_id' });
  models.RetsFeedRun.hasMany(models.RetsStaging, { foreignKey: 'rets_feed_run_id' });
  models.SavedSearch.belongsTo(models.User, { foreignKey: 'user_id' });
  models.User.hasMany(models.SavedSearch, { foreignKey: 'user_id' });
  models.SavedSearchProperty.belongsTo(models.MainCity, { foreignKey: 'city_id' });
  models.MainCity.hasMany(models.SavedSearchProperty, { foreignKey: 'city_id' });
  models.SavedSearchProperty.belongsTo(models.User, { foreignKey: 'user_id' });
  models.User.hasMany(models.SavedSearchProperty, { foreignKey: 'user_id' });
  models.SavedSearchPropertyHood.belongsTo(models.MainHood, { foreignKey: 'hood_id' });
  models.MainHood.hasMany(models.SavedSearchPropertyHood, { foreignKey: 'hood_id' });
  models.SavedSearchPropertyHood.belongsTo(models.SavedSearchProperty, { foreignKey: 'saved_search_id' });
  models.SavedSearchProperty.hasMany(models.SavedSearchPropertyHood, { foreignKey: 'saved_search_id' });
  models.School.belongsTo(models.SchoolBoard, { foreignKey: 'school_board_id' });
  models.SchoolBoard.hasMany(models.School, { foreignKey: 'school_board_id' });
  models.School.belongsTo(models.SchoolLevel, { foreignKey: 'school_level_id' });
  models.SchoolLevel.hasMany(models.School, { foreignKey: 'school_level_id' });
  models.School.belongsTo(models.SchoolType, { foreignKey: 'school_type_id' });
  models.SchoolType.hasMany(models.School, { foreignKey: 'school_type_id' });
  models.SchoolDemographic.belongsTo(models.School, { foreignKey: 'school_id' });
  models.School.hasMany(models.SchoolDemographic, { foreignKey: 'school_id' });
  models.SchoolProficiency.belongsTo(models.ProficiencySubject, { foreignKey: 'proficiency_subject_id' });
  models.ProficiencySubject.hasMany(models.SchoolProficiency, { foreignKey: 'proficiency_subject_id' });
  models.SchoolProficiency.belongsTo(models.School, { foreignKey: 'school_id' });
  models.School.hasMany(models.SchoolProficiency, { foreignKey: 'school_id' });
  models.SavedSearchPropertyType.belongsTo(models.SavedSearchProperty, { foreignKey: 'saved_search_id' });
  models.SavedSearchProperty.hasMany(models.SavedSearchPropertyType, { foreignKey: 'saved_search_id' });
  models.SeoPage.belongsTo(models.Page, { foreignKey: 'page_id' });
  models.Page.hasMany(models.SeoPage, { foreignKey: 'page_id' });
  models.SeoPage.belongsTo(models.SeoTemplate, { foreignKey: 'seo_template_id' });
  models.SeoTemplate.hasMany(models.SeoPage, { foreignKey: 'seo_template_id' });
  models.SeoPage.belongsTo(models.SeoTermination, { foreignKey: 'seo_termination_id' });
  models.SeoTermination.hasMany(models.SeoPage, { foreignKey: 'seo_termination_id' });
  models.SchoolEligibility.belongsTo(models.School, { foreignKey: 'school_id' });
  models.School.hasMany(models.SchoolEligibility, { foreignKey: 'school_id' });
  models.SchoolEligibility.belongsTo(models.SchoolEligibleAddress, { foreignKey: 'school_eligible_address_id' });
  models.SchoolEligibleAddress.hasMany(models.SchoolEligibility, { foreignKey: 'school_eligible_address_id' });
  models.Subscription.belongsTo(models.SubscriptionSource, { foreignKey: 'subscription_source_id' });
  models.SubscriptionSource.hasMany(models.Subscription, { foreignKey: 'subscription_source_id' });
  models.Subscription.belongsTo(models.SubscriptionType, { foreignKey: 'subscription_type_id' });
  models.SubscriptionType.hasMany(models.Subscription, { foreignKey: 'subscription_type_id' });
  models.Subscription.belongsTo(models.UnsubscriptionSource, { foreignKey: 'unsubscription_source_id' });
  models.UnsubscriptionSource.hasMany(models.Subscription, { foreignKey: 'unsubscription_source_id' });
  models.Subscription.belongsTo(models.User, { foreignKey: 'user_id' });
  models.User.hasMany(models.Subscription, { foreignKey: 'user_id' });
  models.User.belongsTo(models.FacebookLogin, { foreignKey: 'facebook_login_id' });
  models.FacebookLogin.hasMany(models.User, { foreignKey: 'facebook_login_id' });
  models.User.belongsTo(models.LoginType, { foreignKey: 'login_type_id' });
  models.LoginType.hasMany(models.User, { foreignKey: 'login_type_id' });
  models.User.belongsTo(models.Role, { foreignKey: 'role_id' });
  models.Role.hasMany(models.User, { foreignKey: 'role_id' });
  models.User.belongsTo(models.UserStatus, { foreignKey: 'user_status_id' });
  models.UserStatus.hasMany(models.User, { foreignKey: 'user_status_id' });
  models.UserAffiliate.belongsTo(models.ContactSource, { foreignKey: 'contact_source_id' });
  models.ContactSource.hasMany(models.UserAffiliate, { foreignKey: 'contact_source_id' });
  models.UserAffiliate.belongsTo(models.User, { foreignKey: 'user_id' });
  models.User.hasMany(models.UserAffiliate, { foreignKey: 'user_id' });
  models.UserBookmark.belongsTo(models.User, { foreignKey: 'user_id' });
  models.User.hasMany(models.UserBookmark, { foreignKey: 'user_id' });
  models.UserInvite.belongsTo(models.User, { foreignKey: 'user_id' });
  models.User.hasMany(models.UserInvite, { foreignKey: 'user_id' });

  return models;
};